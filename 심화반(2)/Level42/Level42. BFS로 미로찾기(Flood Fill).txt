#include <iostream>
#include <queue>
using namespace std;
int map[4][4] = {
	0,0,0,0,
	1,1,0,1,
	0,0,0,0,
	1,0,1,0,
};
int used[4][4];
struct Node {
	int y, x;
	int level;
};
Node q[20];
int head;
int tail;
int direct[4][2] = { -1,0,1,0,0,-1,0,1 };
Node tar;
void init() {
	head = 0;
	tail = 1;
	used[0][0] = 1;
}

int main() {
	init();
	cin >> q[0].y >> q[0].x >> tar.y >> tar.x;
	q[0].level = 0;

	while (head != tail) {
		Node now = q[head];
		for (int i = 0; i < 4; i++) {
			int ny = now.y + direct[i][0];
			int nx = now.x + direct[i][1];
			if (ny < 0 || nx < 0 || ny >= 4 || nx >= 4) continue;
			if (map[ny][nx] == 1) continue;
			if (used[ny][nx] == 1) continue;
			used[ny][nx] = 1;
			q[tail++] = { ny,nx, now.level + 1 };
			if (ny == tar.y && nx == tar.x) {
				cout << now.level + 1 << "회";
				return 0;
			}
		}
		head++;
	}

	return 0;
}
---------------------------------------------------------------------
선생님 풀이 (함수로 빼기)
#include <iostream>
#include <queue>
using namespace std;

int map[4][4] = {
	0,0,0,0,
	1,1,0,1,
	0,0,0,0,
	1,0,1,0,
};
int used[4][4];

struct Node { int y; int x; int level; };
int h, t;
Node q[11000];

int bfs()
{
	int direct[4][2] = { -1,0,1,0,0,1,0,-1 };
	
	int a, b;
	int tarY, tarX;

	cin >> a >> b;
	cin >> tarY >> tarX;

	q[t++] = { a, b, 0 };
	used[a][b] = 1;

	while (h != t) {
		Node now = q[h++];
		for (int i = 0; i < 4; i++) {
			int ny = now.y + direct[i][0];
			int nx = now.x + direct[i][1];
			if (ny < 0 || nx < 0 || ny >= 4 || nx >= 4) continue;
			if (map[ny][nx] == 1) continue;
			if (used[ny][nx] == 1) continue;
			used[ny][nx] = 1;

			q[t++] = { ny, nx, now.level + 1 };

			//종료조건
			if (ny == tarY && nx == tarX) {
				return now.level + 1;
			}
		}
	}

	return -1;
}

int main()
{
	int ret = bfs();
	cout << ret << "회";

	return 0;
}