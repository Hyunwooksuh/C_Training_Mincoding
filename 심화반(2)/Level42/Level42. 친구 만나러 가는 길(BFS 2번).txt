#include <iostream>
#include <cstring>
#include <queue>
using namespace std;
int map[3][5] = {
	0,0,0,0,99,
	99,0,99,0,0,
	0,0,0,0,99,
};
int used[3][5];
struct Node {
	int y, x;
	int level;
};
int direct[4][2] = { -1,0,1,0,0,1,0,-1 };
Node q[50];
int head;
int tail;
int sum = 0;
int bfs(int sy, int sx, int tary, int tarx) {

	memset(q, 0, sizeof(q));
	memset(used, 0, sizeof(used));
	head = 0; 
	tail = 1;
	used[sy][sx] = 1;
	q[0] = { sy, sx, 0 };

	while (head != tail) {

		Node now = q[head];
		for (int i = 0; i < 4; i++) {
			int ny = now.y + direct[i][0];
			int nx = now.x + direct[i][1];
			if (ny < 0 || nx < 0 || ny >= 3 || nx >= 5) continue;
			if (map[ny][nx] == 99) continue;
			if (used[ny][nx] == 1) continue;
			used[ny][nx] = 1;
			q[tail++] = { ny, nx, now.level+1 };
			map[ny][nx] = map[now.y][now.x] + 1;
			if (ny == tary && nx == tarx) {
				return now.level + 1;
			}
		}
		head++;
	}
	return -1;

}
int main() {
	
	int a, b, c, d;
	cin >> a >> b >> c >> d;
	sum += bfs(0, 0, a, b);
	sum += bfs(a, b, c, d);
	cout << sum;

	return 0;
}
---------------------------------------------------------------------
선생님 풀이
#include <iostream>
#include <queue>
using namespace std;

int map[4][5] = {
	0,0,0,0,1,
	1,0,1,0,0,
	0,0,0,0,1,
};

struct Node { int y; int x; int level; };

int bfs(int sy, int sx, int ey, int ex)
{
	Node q[11000] = { 0 };
	int used[4][5] = { 0 };
	int h = 0;
	int t = 0;
	int direct[4][2] = { -1,0,1,0,0,1,0,-1 };
	
	q[t++] = { sy, sx, 0 };
	used[sy][sx] = 1;

	while (h != t) {
		Node now = q[h++];
		for (int i = 0; i < 4; i++) {
			int ny = now.y + direct[i][0];
			int nx = now.x + direct[i][1];
			if (ny < 0 || nx < 0 || ny >= 4 || nx >= 5) continue;
			if (map[ny][nx] == 1) continue;
			if (used[ny][nx] == 1) continue;
			used[ny][nx] = 1;

			q[t++] = { ny, nx, now.level + 1 };

			//종료조건
			if (ny == ey && nx == ex) {
				return now.level + 1;
			}
		}
	}

	return -1;
}

int main()
{
	int a, b, c, d;
	cin >> a >> b;
	cin >> c >> d;

	int ret = 0;
	ret += bfs(0, 0, a, b);
	ret += bfs(a, b, c, d);
	cout << ret;

	return 0;
}