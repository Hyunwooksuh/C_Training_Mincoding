#include <iostream>
#include <queue>
#include <string>
#include <vector>
using namespace std;
struct Node {
	int y, x;
	int num;
};
int map[10][10] = { 0 };
int direct[4][2] = { -1,0,1,0,0,-1,0,1 };
int n;

bool operator<(Node v, Node t) {
	return v.num > t.num;
}

priority_queue<Node> t;
int isZero() {
	for (int y = 0; y < n; y++) {
		for (int x = 0; x < n; x++) {
			if (map[y][x] != 0) return 0;
		}
	}
	return 1;
}

int main() {

	cin >> n;
	for (int y = 0; y < n; y++) {
		for (int x = 0; x < n; x++) {
			cin >> map[y][x];
			t.push({ y,x,map[y][x] });
		}
	}

	int ret = 0;
	while (1) {

		if (isZero() == 1) break;

		Node tar = t.top();
		t.pop();
		if (map[tar.y][tar.x] == 0) continue;
		map[tar.y][tar.x] = 0;
		for (int x = 0; x < 4; x++) {
			int ny = tar.y + direct[x][0];
			int nx = tar.x + direct[x][1];
			if (ny < 0 || nx < 0 || ny >= n || nx >= n) continue;
			map[ny][nx] = 0;
		}
		ret = tar.num;
	}

	cout << ret << "초";
	return 0;
}
------------------------------------------------------------------------------------------------------
선생님 풀이

#include <iostream>
#include <queue>
using namespace std;

struct Node {
	int y, x;
	int num;
};

priority_queue<Node> q;

bool operator<(Node v, Node tar) {
	return tar.num < v.num;
}

int map[1100][1100];

int main()
{	
	int n;
	cin >> n;
	for (int y = 0; y < n; y++) {
		for (int x = 0; x < n; x++) {
			cin >> map[y][x];
			q.push({ y, x, map[y][x] });
		}
	}

	int direct[5][2] = { 0,0, -1,0, 1,0, 0,1, 0,-1 };
	int cnt = 0;
	Node ret;

	while (!q.empty()) {
		ret = q.top();
		q.pop();

		if (map[ret.y][ret.x] == 0) continue;

		for (int t = 0; t < 5; t++) {
			int ny = ret.y + direct[t][0];
			int nx = ret.x + direct[t][1];

			if (ny < 0 || nx < 0 || ny >= n || nx >= n) continue;
			if (map[ny][nx] == 0) continue;
			map[ny][nx] = 0;
			cnt++;
		}

		if (cnt == n * n) {
			break;
		}
	}

	cout << ret.num << "초";

	return 0;
}