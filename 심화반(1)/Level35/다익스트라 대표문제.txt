#include <iostream>
#include <vector>
#include <queue> 
using namespace std;
struct Node {   // Node에는 경유지, 가중치(비용)이 저장됨
	int n;
	int price;
}; 

vector<vector<Node>> alist(5);
int used[5] = { 0 };
int result[5] = { 0,9999,9999,9999,9999 }; 
// 비용배열, 갱신을 위해 초기값은 의도적으로 높게 설정
bool operator<(Node v, Node tar) {
	return v.price > tar.price;
}
priority_queue<Node> q;
void init() {
	alist[0].push_back({ 1,25 });
	alist[0].push_back({ 2,50 });
	alist[0].push_back({ 3,10 });
	alist[1].push_back({ 2,3 });
	alist[2].push_back({ 4,1 });
	alist[3].push_back({ 4,18 });
	alist[3].push_back({ 1,5 });
}

int main() {

	init();
	q.push({ 0,0 }); //시작점은 먼저 넣고 시작한다. 

	while (!q.empty()) {

		Node via = q.top();
		q.pop();

		if (used[via.n] == 1) continue; //이미 경유한 지점의 경우 넘어간다.
		used[via.n] = 1;

		for (int i = 0; i < alist[via.n].size(); i++) {
			Node tar = alist[via.n][i]; //목표로 한 지점을 target 변수에 넣어준다.
		
			if (result[tar.n] > via.price + tar.price) {
				result[tar.n] = via.price + tar.price;
				q.push({ tar.n, result[tar.n] });
				// result배열에 최소값을 갱신해주고, queue에 경유지를 넣어준다. 
			}
		}
	}

	return 0;
}