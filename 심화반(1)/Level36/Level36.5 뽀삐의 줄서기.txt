#include <iostream>
#include <string>
#include <queue>
#include <vector>
using namespace std;
char path[10];
char vect[10] = "ABCDEF";
int visited[10];
int a, b;
int cnt = 0;
void dfs(int level) {

	if (path[a-1] == 'E') return;
	if (path[b-1] == 'E') return;


	if (level == 6) {
		cnt++;
		return;
	}

	for (int i = 0; i < 6; i++) {
		if (level == a-1 && vect[i] == 'E') continue;
		if (level == b-1 && vect[i] == 'E') continue;
		if (visited[i] == 1) continue;
		visited[i] = 1;
		path[level] = vect[i];
		dfs(level + 1);
		path[level] = vect[i];
		visited[i] = 0;
	}
}

int main()
{
	cin >> a >> b;
	dfs(0);
	cout << cnt;

	return 0;
}
------------------------------------------------------------------------
선생님 풀이

#include <iostream>
using namespace std;

int a, b;
int cnt;
int used[6];

void back(int level) {
	
	if (level == 6) {
		cnt++;
		return;
	}

	for (int i = 0; i < 6; i++) {
		//i == 0이 뽀삐임을 가정한다.
		if (i == 0 && (level == a - 1 || level == b - 1)) continue;

		if (used[i] == 1) continue;
		used[i] = 1;
		back(level + 1);
		used[i] = 0;
	}
}

int main() {
	cin >> a >> b;

	back(0);
	cout << cnt;
	return 0;
}
