#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;
char vect[10][10];
char path[10];
char temp[10];
vector<char> v;
int n;
int maxCnt = -21e8;

int direct[5][2] = {
	-1,0,1,0,0,-1,0,1,0,0
};
int getDirect(int dy, int dx) {
	int ret = 0;
	for (int i = 0; i < 5; i++) {
		int ny = dy + direct[i][0];
		int nx = dx + direct[i][1];
		if (ny < 0 || nx < 0 || ny >= 4 || nx >= 4) continue;
		if (vect[ny][nx] == '_') continue;
		vect[ny][nx] = '_';
		ret++;
	}
	return ret;
}

void back(int level, int cnt) {

	if (level == 3) {
		if (cnt > maxCnt) {
			maxCnt = cnt;
			memcpy(temp, path, 10 * 1);
		}
		return;
	}

	char backup[10][10];
	memcpy(backup, vect, 10 * 10 * 1);

	for (int y = 0; y < 4; y++) {
		for (int x = 0; x < 4; x++) {

			if (vect[y][x] == '_') continue;
			path[level] = vect[y][x];
			int ret = getDirect(y, x);
			back(level + 1, cnt + ret);
			memcpy(vect, backup, 10 * 10 * 1);
			path[level] = 0;

		}
	}
	

}

int main()
{
	for (int y = 0; y < 4; y++) {
		for (int x = 0; x < 4; x++) {
			cin >> vect[y][x];
		}
	}
	cin >> n;
	back(0, 0);

	for (int i = 0; i < maxCnt; i++) {
		if (temp[i] >= 0 && temp[i] <= 9) continue;
		v.push_back(temp[i]);
	}
	sort(v.begin(), v.end());

	for (int i = 0; i < v.size(); i++) {
		cout << v[i] << " ";
	}

	return 0;
}
------------------------------------------------------------------
선생님 풀이
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

char map[4][5];
char path[20];

int maxi;
char maxPath[20];

int bn;

int boom(int dy, int dx) {
	int direct[5][2] = { 0,0, 1,0, -1,0, 0,1, 0,-1 };
	int cnt = 0;

	for (int t = 0; t < 5; t++) {
		int ny = dy + direct[t][0];
		int nx = dx + direct[t][1];
		if (ny < 0 || nx < 0 || ny >= 4 || nx >= 4) continue;
		if (map[ny][nx] != '_') cnt++;
		map[ny][nx] = '_';
	}
	return cnt;
}

void run(int level, int cnt) {

	if (level == bn) {
		if (maxi < cnt) {
			maxi = cnt;
			memcpy(maxPath, path, 20);
		}

		return;
	}

	char backup[4][5];
	memcpy(backup, map, 4 * 5);

	for (int y = 0; y < 4; y++) {
		for (int x = 0; x < 4; x++) {
			if (map[y][x] == '_') continue;

			path[level] = map[y][x];
			int ret = boom(y, x);
			run(level + 1, cnt + ret);
			path[level] = 0;

			//원상복구
			memcpy(map, backup, 4 * 5);
		}
	}
}

int main() {
	for (int i = 0; i < 4; i++) {
		cin >> map[i];
	}
	cin >> bn;

	run(0, 0);

	sort(maxPath, maxPath + bn);
	for (int i = 0; i < bn; i++) {
		cout << maxPath[i] << " ";
	}

	return 0;
}